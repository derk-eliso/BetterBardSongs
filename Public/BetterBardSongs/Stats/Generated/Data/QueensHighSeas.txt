//-- Spells
new entry "Shout_Bard_Perform_DOS2_3_Whistle"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Bard_Perform_DOS2_3_Whistle"
data "UseCosts" "BonusActionPoint:1;BardicInspiration:1"
data "SpellProperties" "IF(HasProficiency('MusicalInstrument',context.Source)):ApplyStatus(PERFORM_POSITIVE,100,-1);IF(not HasProficiency('MusicalInstrument',context.Source)):ApplyStatus(PERFORM_NEGATIVE,100,-1)IF(HasProficiency('MusicalInstrument',context.Source)):ApplyStatus(PERFORM_POSITIVE_DOS2_3,100,2);GROUND:CreateSurface(8,2,Water);IF(HasProficiency('MusicalInstrument',context.Source)):ApplyStatus(WET,100,2)"
data "SpellFlags" "ImmediateCast;HasVerbalComponent;DontAbortPerforming;IsConcentration"
data "RequirementConditions" "not HasStatus('PERFORM_POSITIVE')"

new entry "Shout_Bard_Perform_Continue_DOS2_3"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Bard_Perform_Continue_ThePower"
data "SpellProperties" "SetStatusDuration(SELF,PERFORM_POSITIVE_DOS2_3,2)"
data "Icon" "Action_Song_ThePower"
data "DescriptionParams" "'The Queen's High Seas'"
data "RequirementConditions" "HasStatus('PERFORM_POSITIVE_DOS2_3')"
//------//

//-- Statuses
new entry "PERFORM_POSITIVE_DOS2_3"
type "StatusData"
data "StatusType" "BOOST"
using "PERFORM_POSITIVE_DOS2_3"
data "Icon" "Action_Song_TheQueensHighSeas"
data "Boosts" "UnlockSpell(Shout_Bard_Perform_Continue_DOS2_3)"
data "AuraRadius" "8"
data "AuraStatuses" "TARGET:IF(not HasAnyStatus({'DOS2_JOIN_1','DOS2_JOIN_2','DOS2_JOIN_3'},{},{},context.Source) and Party()):ApplyStatus(DOS2_JOIN_3);IF(Ally() and not Dead()):ApplyStatus(INP_AURA_DOS2_3);ApplyStatus(WET,100, 3)"
data "PerformEventName" "Bard_Perform_QueensHighSeas"

new entry "INP_AURA_DOS2_3"
type "StatusData"
data "StatusType" "BOOST"
using "BLESS"
data "Icon" "Action_Song_TheQueensHighSeas"
data "DisplayName" "hab8d0219460645ff8cd4624ec4344293db0e"
data "Description" "h0eb6a232032f44ac8c08a4043b60f0389fgg"
data "DescriptionParams" "'The Queen's High Seas';LevelMapValue(D4Cantrip)"
data "Boosts" "Resistance(Cold, Resistant)"
data "TickType" "StartTurn"
data "TickFunctors" "IF(TurnBased() and not HasStatus('DOWNED') and not Dead() and InSurface('SurfaceWater') or InSurface('SurfaceWaterElectrified')):RegainHitPoints(LevelMapValue(D4Cantrip))"
data "StackId" "WATER_SURFACE_REGENERATION"
//------//